defmodule Exfwghtblog.Router do
  @moduledoc """
  Routes requests to the proper blog post, and also the proper static resource.
  """

  require Logger
  use Plug.Router

  plug(:match)
  plug(:dispatch)

  # ============================================================================
  # Index
  get "/" do
    conn |> fetch_by_path(["res", "index.html"], true)
  end
  get "/index.html" do
    conn |> fetch_by_path(["res", "index.html"], true)
  end
  # ============================================================================
  # Favicon
  get "/favicon.ico" do
    conn |> fetch_by_path(["res", "favicon.ico"], true)
  end
  # ============================================================================
  # Static resources
  get "/res/:static_resource" do
    conn |> fetch_by_path(["res", static_resource], true)
  end
  # ============================================================================
  # Blog posts
  get "/posts/" do
    conn |> fetch_all_by_path(["posts"])
  end
  get "/posts/:blog_post" do
    conn |> fetch_by_path(["posts", "#{blog_post}.md"])
  end
  # ============================================================================
  # Nothing of note
  match _ do
    Logger.info("404 fetching unhandled content", conn: inspect(conn))
    conn |> send_resp(404, "404 Not Found\r\n")
  end
  # ============================================================================
  defp fetch_all_by_path(conn, path) do
    case Exfwghtblog.Fetcher.fetch_all(Path.join(List.flatten(["/", path]))) do
      {:ok, fetch_origin, content} ->
        Logger.debug("200 enumerated directory",
          conn: inspect(conn),
          path: inspect(path),
          origin: fetch_origin
        )

        conn
        |> send_resp(
          200,
          content
          |> List.foldl(
            "# Autogenerated post listing\r\n\r\n",
            &(&2 <> "- [#{&1}](/posts/#{&1})\r\n")
          )
          |> Earmark.as_html!()
          |> Exfwghtblog.Engine.post_fill()
        )

      {:error, fetch_origin, error} ->
        Logger.error("502 thrown because directory could not be enumerated",
          conn: inspect(conn),
          path: inspect(path),
          origin: fetch_origin,
          reason: inspect(error)
        )

        conn |> send_resp(502, "502 Bad Gateway\r\n")
    end
  end
  # ============================================================================
  defp fetch_by_path(conn, path, raw \\ false) do
    case Exfwghtblog.Fetcher.fetch(Path.join(List.flatten(["/", path]))) do
      {:ok, fetch_origin, content} ->
        Logger.debug("200 fetched content",
          conn: inspect(conn),
          path: inspect(path),
          origin: fetch_origin
        )
        cond do
          raw -> conn |> send_resp(200, content)
          true -> conn |> send_resp(200, content |> Earmark.as_html!() |> Exfwghtblog.Engine.post_fill())
        end

      {:error, fetch_origin, error} ->
        Logger.error("502 thrown because content can not be fetched",
          conn: inspect(conn),
          path: inspect(path),
          origin: fetch_origin,
          reason: inspect(error)
        )

        conn |> send_resp(502, "502 Bad Gateway\r\n")
    end
  end
end
