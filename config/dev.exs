# Development mode configuration
import Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :exfwghtblog_frontend, ExfwghtblogFrontend.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {127, 0, 0, 1}, port: 4000],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "h0lcUogZ2p/XfPiEhcCAR1ZRRCvstGPu59UqV2kOGEu6j5trp6RDsc2JLrHCZNLY",
  watchers: [
    esbuild: {Esbuild, :install_and_run, [:default, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:default, ~w(--watch)]}
  ]

config :exfwghtblog_frontend, :backend_api_url, "http://127.0.0.1:8080"

config :exfwghtblog_backend, :listen_ip, {127, 0, 0, 1}
config :exfwghtblog_backend, :listen_port, 8080

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :exfwghtblog_frontend, ExfwghtblogFrontend.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/exfwghtblog_frontend/(controllers|live|components)/.*(ex|heex)$"
    ]
  ]

# Enable dev routes for dashboard and mailbox
config :exfwghtblog_frontend, dev_routes: true

# Set logger configuration
config :logger, :console,
  format: "[$level] $metadata$message\n",
  metadata: [:error_code, :mfa]

# =============================================================================
# Backend configuration
# =============================================================================
# Get Git commit hash. Surely there must be a better way.
config :exfwghtblog_backend,
  commit_sha_result: System.cmd("git", ["rev-parse", "--short", "HEAD"])

# Configure postgres database
config :exfwghtblog_backend, ExfwghtblogBackend.Repo,
  username: "postgres",
  password: "change_me",
  hostname: "127.0.0.1",
  database: "exfwghtblog_dev",
  stacktrace: true,
  show_sensitive_data_on_connection_error: true,
  pool_size: 10

# Set attributes
config :exfwghtblog_backend,
  # Login time-to-live is 5 minutes
  session_ttl_minutes: 5,
  # Blog titles are up to 80 characters
  title_limit: 80,
  # Blog summaries are up to 250 characters
  summary_limit: 250,
  # Blog bodies are up to 5000 characters
  body_limit: 5000,
  # Limit pages to 5 posts
  post_fetch_count: 5

# Set Guardian secret
config :exfwghtblog_backend, ExfwghtblogBackend.Guardian,
  issuer: "exfwghtblog",
  secret_key: "yusFCz/fEo8BZ6is6vgU7sN4QehQOpO5pXC/OTFZFUNoV+uacuMMdpVaSdBugif/"
